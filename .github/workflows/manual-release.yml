name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  release:
    name: Create Manual Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.0

      - name: Run tests first
        run: zig build test

      - name: Get current version
        id: current_version
        run: |
          VERSION=$(grep -oP '\.version = "\K[^"]+' build.zig.zon || echo "0.0.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          if [ -n "${{ inputs.custom_version }}" ]; then
            NEW_VERSION="${{ inputs.custom_version }}"
            echo "Using custom version: $NEW_VERSION"
          else
            CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
            BUMP_TYPE="${{ inputs.version_type }}"

            # Parse current version
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR="${VERSION_PARTS[0]:-0}"
            MINOR="${VERSION_PARTS[1]:-0}"
            PATCH="${VERSION_PARTS[2]:-0}"

            # Calculate new version
            case "$BUMP_TYPE" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update version in build.zig.zon
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          sed -i "s/\.version = \".*\"/\.version = \"$NEW_VERSION\"/" build.zig.zon

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add build.zig.zon
          git commit -m "chore: bump version to $NEW_VERSION"
          git push

      - name: Generate release notes
        id: release_notes
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          {
            echo "## Manual Release"
            echo ""
            echo "This release was created manually."
            echo ""

            if [ -n "$LAST_TAG" ]; then
              echo "### Changes since $LAST_TAG"
              echo ""
              git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --reverse
              echo ""
              echo ""
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v$NEW_VERSION"
            else
              echo "### All Changes"
              echo ""
              git log --pretty=format:"- %s (%h)" --reverse | head -20
              echo ""
              echo "..."
              echo ""
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/v$NEW_VERSION"
            fi
          } > release_notes.md

          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          name: v${{ steps.new_version.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
